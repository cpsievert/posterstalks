networklevel(mats_traits_bal[[100]], index = c("connectance", "links per species", "nestedness"))
networklevel(mats_traits_bal[[200]], index = c("connectance", "links per species", "nestedness"))
networklevel(mats_traits_bal[[20]], index = c("connectance", "links per species", "nestedness"))
networklevel(mats_traits_bal[[22]], index = c("connectance", "links per species", "nestedness"))
tree<-rtree(50)
x<-fastBM(tree) # simulate using fastBM
x
anc.ML(tree,x) # fit model & estimate ancestral states
library(OUwie)
data(tworegime)
select.reg<-character(length(tree$node.label))
select.reg[tree$node.label == 1] <- "black"
select.reg[tree$node.label == 2] <- "red"
plot(tree)
nodelabels(pch=21, bg=select.reg)
trait[1:5,]
OUwie(tree,trait,model=c("OUMV"),root.station=TRUE)
getnetmets <- function(balanced, unbalanced) {
netmets_bal <- ldply(balanced, function(x) networklevel(x,
index = c("connectance", "links per species", "nestedness")))
netmets_unbal <- ldply(unbalanced, function(x) networklevel(x,
index = c("connectance", "links per species", "nestedness")))
data.frame(
type = c( rep("bal", length(balanced)), rep("unbal", length(unbalanced))),
rbind(netmets_bal, netmets_unbal) )
}
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
networklevel(mats_traits_bal[[22]], index = c("connectance", "links per species", "nestedness"))
networklevel(mats_traits_bal[[20]], index = c("connectance", "links per species", "nestedness"))
networklevel(mats_traits_bal[[21]], index = c("connectance", "links per species", "nestedness"))
mats_traits_bal[[21]]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(x-y > ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.1)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.1)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
sum(mats_traits_bal[[1]])
sum(mats_traits_bal[[2]])
sapply(mats_traits_bal, sum)
tree_predator <- rcoal(10)
tree_prey <- rcoal(10)
trait_predator <- fastBM(tree_predator, a = 10, bounds=c(0,100))
trait_prey <- fastBM(tree_prey, a = 10, bounds=c(0,100))
trait_predator
trait_prey
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1.5))
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(x/y > ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1)
sapply(mats_traits_bal, sum)
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(x/y > abs(ratio)))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1)
sapply(mats_traits_bal, sum)
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
sapply(mats_traits_bal, sum)
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1.5))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1.5))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1.5))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x/y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1))
outer(trait_predator, trait_prey,
function(x,y) as.numeric(exp(x-y) > 1))
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) > ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
sapply(mats_traits_bal, sum)
mats_traits_bal[sapply(mats_traits_bal, sum) == 0]
mats_traits_bal[!sapply(mats_traits_bal, sum) == 0]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) > ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats[!sapply(mats, sum) == 0]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats[!sapply(mats, sum) == 0]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.3)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.3)
sapply(mats_traits_bal, sum)
sapply(mats_traits_unbal, sum)
df_rand <- getnetmets(mats_rand_bal, mats_rand_unbal)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
length(df_traits)
df_traits
mats_traits_bal[[15]]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mats[[i]] <- mm
}
mats[!sapply(mats, sum) == 0]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
ratio <- 1.5
listoftraitvecs <- all_t1_unbal
mats <- list()
mm <- outer(listoftraitvecs[[1]][[1]], listoftraitvecs[[2]][[1]],
function(x,y) as.numeric(exp(x-y) < ratio))
mm
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
mm
if(
sum(mm) == 0 | sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]))
{mm <- NULL} else
{mm <- mm}
mm
matrix(1, 20, 20)
mm <- matrix(1, 20, 20)
if(
sum(mm) == 0 | sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]))
{mm <- NULL} else
{mm <- mm}
mm
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
if(
sum(mm) == 0 | sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]))
{mm <- NULL} else
{mm <- mm}
mats[[i]] <- mm
}
mats[!is.null(mats)]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
sapply(mats_traits_bal, sum)
sapply(mats_traits_unbal, sum)
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
# 		if(sum(mm) == 0) { mm <- NULL } else
# 			if( sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]) ) {mm <- NULL } else
# 					{ mm <- mm }
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
length(sapply(mats_traits_unbal, sum))
length(sapply(mats_traits_bal, sum))
mm
mm <- matrix(1, 20, 20)
mm
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == length(listoftraitvecs[[1]][[i]])*length(listoftraitvecs[[2]][[i]]) ) {mm <- NULL } else
{ mm <- mm }
mm
i
dims(mm)
dim(mm)
str(mm)
mm <- matrix(1, 20, 20)
str(mm)
ncol(mm)
nrow(mm) * ncol(mm)
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == nrow(mm) * ncol(mm) ) {mm <- NULL } else
{ mm <- mm }
mm
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == nrow(mm) * ncol(mm) ) {mm <- NULL } else
{ mm <- mm }
mats[[i]] <- mm
}
mats
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
sapply(mats_traits_bal, sum)
sapply(mats_traits_unbal, sum)
mats_traits_unbal[[2]]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == nrow(mm) * ncol(mm) ) {mm <- NULL } else
{ mm <- mm }
mats[[i]] <- mm
}
mats[!is.null(mats)]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
mats_traits_unbal[[2]]
sapply(mats_traits_unbal, is.null)
mats_traits_unbal[is.null(mats_traits_unbal)]
mats_traits_unbal[sapply(mats_traits_unbal, is.null)]
mats_traits_unbal[!sapply(mats_traits_unbal, is.null)]
sim_traits_nets <- function(listoftraitvecs, ratio) {
mats <- list()
for(i in 1:length(listoftraitvecs[[1]])) {
mm <- outer(listoftraitvecs[[1]][[i]], listoftraitvecs[[2]][[i]],
function(x,y) as.numeric(exp(x-y) < ratio))
dimnames(mm)[[1]] <- names(listoftraitvecs[[1]][[i]])
dimnames(mm)[[2]] <- names(listoftraitvecs[[2]][[i]])
if(sum(mm) == 0) { mm <- NULL } else
if( sum(mm) == nrow(mm) * ncol(mm) ) {mm <- NULL } else
{ mm <- mm }
mats[[i]] <- mm
}
mats[!sapply(mats, is.null)]
}
mats_traits_bal <- sim_traits_nets(all_t1_bal, ratio = 1.5)
mats_traits_unbal <- sim_traits_nets(all_t1_unbal, ratio = 1.5)
sapply(mats_traits_unbal, is.null)
sapply(mats_traits_unbal, sum)
sapply(mats_traits_bal, sum)
df_traits <- getnetmets(mats_traits_bal, mats_traits_unbal)
df_traits
mats_traits_bal[[20]]
sum(mats_traits_bal[[20]])
df_traits_melt <- melt(df_traits)
head(df_traits_melt)
ggplot(df_traits_melt, aes(type, value, fill=variable)) +
theme_bw(base_size=18) +
geom_boxplot() +
facet_wrap(~ variable, scales="free") +
opts(legend.position = 'none')
library(rplos)
library(ggplot2); library(rgbif); library(maps)
dan_chr <- occurrencelist(
sciname = 'Danaus chrysippus', coordinatestatus = TRUE, maxresults = 200,
latlongdf = TRUE, removeZeros = TRUE)
dan_chr
library(ggplot2); library(rgbif); library(maps)
detach("package:rgbif")
install_github("rgbif", "vijaybarve")
library(rgbif)
install_github("rentrez", "ropensci")
library(rentrez)
pubmed_search <- entrez_search(db="pubmed", term="Dwarf Elephant", retmax=1)
entrez_summary(db="pubmed", ids=pubmed_search$ids)
library(knitr)
knit2pdf("/Users/ScottMac/github/SChamberlain/posterstalks/rvantalk/R/ropensci_egs.Rmd")
knit2pdf("/Users/ScottMac/github/SChamberlain/posterstalks/rvantalk/R/ropensci_egs.Rmd")
knit2html("/Users/ScottMac/github/SChamberlain/posterstalks/rvantalk/R/ropensci_egs.Rmd")
library(rentrez)
entrez_link(dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')
entrez_link(db='pubmed', dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')
entrez_link(db='pubmed', dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')$file
out <- entrez_link(db='pubmed', dbfrom='pubmed', retmode='xml', id=19755503, cmd='neighbor')$file
out
xpathApply(out, "//Link")
xpathApply(out, "//Link", xmlValue)
xpathApply(out, "//Link", xmlValue)
sapply(xpathApply(out, "//Link", xmlValue), as.numeric)
do.call(xpathApply(out, "//Link", xmlValue), as.numeric)
do.call(as.numeric, xpathApply(out, "//Link", xmlValue))
sapply(xpathApply(out, "//Link", xmlValue), as.numeric)
out
xpathApply(out, "//LinkName")
xpathApply(out, "/LinkName")
getNodeSet(out, "/LinkName")
getNodeSet(out, "//LinkName")
getNodeSet(out, "//LinkName/Link")
xpathApply(out, "//LinkName/Link")
xpathApply(out, "//LinkName//Link")
xpathApply(out, "//LinkName:Link")
xpathApply(out, "//LinkName[Link]")
xpathApply(out, "//LinkName[pubmed_pubmed_citedin]")
xpathApply(out, "//LinkName:pubmed_pubmed_citedin")
xpathApply(out, "/LinkName:pubmed_pubmed_citedin")
xmlToList(out)
out
xpathApply(out, "LinkName/Link")
xpathApply(out, "@pubmed_pubmed_citedin")
xpathApply(out, "//LinkName[@pubmed_pubmed_citedin]")
getNodeSet(out, "//LinkName[@pubmed_pubmed_citedin]")
xpathApply(out, "/LinkName/pubmed_pubmed_citedin")
xpathApply(out, "//LinkName//pubmed_pubmed_citedin")
xpathApply(out, "//LinkName//Link")
sapply(xpathApply(out, "//Link", xmlValue), as.numeric)
knit2html("/Users/ScottMac/github/SChamberlain/posterstalks/rvantalk/R/ropensci_egs.Rmd")
knit2html("/Users/ScottMac/github/ropensci/docs/nceas/nceas_working_group_proposal.Rmd")
knit2html("/Users/ScottMac/github/ropensci/docs/nceas/nceas_working_group_proposal.Rmd")
knit2html("/Users/ScottMac/github/ropensci/docs/nceas/nceas_working_group_proposal.Rmd")
knit2html("/Users/ScottMac/github/ropensci/docs/nceas/nceas_working_group_proposal.Rmd")
library(treebase); library(ggplot2)
data(treebase)
have <- have_branchlength(treebase)
branchlengths <- treebase[have]
branchlengths
sapply(branchlengths, Ntip)
branchlengths
qplot(numtips)
numtips <- data.frame(sapply(branchlengths, Ntip))
head(numtips)
names(numtips) <- "tips"
qplot(x=tips,dat=numtips, geom="histogram")
head(numtips)
qplot(x=tips, dat=numtips, geom="histogram")
str(numtips)
qplot(tips, dat=numtips, geom="histogram")
qplot(tips, data=numtips, geom="histogram")
qplot(tips, data=numtips, geom="histogram") + theme_bw(base_size==18)
qplot(tips, data=numtips, geom="histogram") + theme_bw(base_size=18)
qplot(tips, data=numtips, geom="histogram") + theme_bw(base_size=20)
numtips <- data.frame(tips=sapply(branchlengths, Ntip), nodes=sapply(branchlengths, Nnode))
head(numtips)
dat <- data.frame(tips=sapply(branchlengths, Ntip), nodes=sapply(branchlengths, Nnode))
dat_melted <- melt(dat)
library(treebase); library(ggplot2); library(reshape2)
dat_melted <- melt(dat)
head(dat_melted)
qplot(value, data=numtips, geom="histogram", colour=variable) + theme_bw(base_size=20)
qplot(value, data=dat_melted, geom="histogram", colour=variable) + theme_bw(base_size=20)
qplot(value, data=dat_melted, geom="histogram", linecolour=variable) + theme_bw(base_size=20)
qplot(value, data=dat_melted, geom="line", linecolour=variable) + theme_bw(base_size=20)
qplot(value, data=dat_melted, geom="density", fill=variable) + theme_bw(base_size=20)
dat_m <- melt(dat)
qplot(value, data=dat_m[dat_m$value<1000,], geom="density", fill=variable) + theme_bw(base_size=20)
ggplot(dat_m[dat_m$value<1000,], aes(value, fill=variable)) +
theme_bw(base_size=20) +
geom_density()
knit2html("/Users/ScottMac/github/SChamberlain/posterstalks/rvantalk/R/ropensci_egs_treebase.Rmd")
knit2html("/Users/ScottMac/github/SChamberlain/posterstalks/bestalk/R/ropensci_egs_treebase.Rmd")
knit2html("/Users/ScottMac/github/SChamberlain/posterstalks/bestalk/R/ropensci_egs_treebase.Rhtml")
knit("/Users/ScottMac/github/SChamberlain/posterstalks/bestalk/R/ropensci_egs_treebase.Rhtml")
library(rplos)
searchplos(terms='ecology', fields='id', limit = 5)
searchplos(terms="*", fields='id', toquery="publication_date:[2012-09-03T00:00:00Z TO 2012-12-31T23:59:59Z]", start=0, limit=5)
plosfields
data(plosfields)
plosfields
searchplos(terms="*", fields='id', toquery="publication_date:2012-09-03T00:00:00Z", start=0, limit=5)
searchplos(terms="*", fields='id', toquery="publication_date:[2012-09-03T00:00:00%20TO%202012-12-31T23:59:59Z]", start=0, limit=5)
searchplos(terms="*", fields='id', toquery="publication_date:[2012-09-03T00:00:00Z%20TO%202012-12-31T23:59:59Z]", start=0, limit=5)
toquery="publication_date:[2012-09-03T00:00:00Z%20TO%202012-12-31T23:59:59Z]"
terms="*"
fields='id'
limit=5
start=0
library(RJSONIO)
library(RCurl)
url = 'http://api.plos.org/search'
key = getOption("PlosApiKey", stop("need an API key for PLoS Journals")
)
curl = getCurlHandle()
insertnones <- function(x) {
toadd <- fields[! fields %in% names(x) ]
values <- rep("none", length(toadd))
names(values) <- toadd
values <- as.list(values)
x <- c(x, values)
x
}
if(is.na(limit)){limit <- 999} else{limit <- limit}
limit
args <- list()
if(!is.na(toquery[[1]])) {
if(length(toquery)==1) {args$fq <- toquery} else
{args <- list(fq=toquery[[1]], fq=toquery[[2]])} } else
args
args
args$api_key <- key
if(!is.na(terms))
args$q <- terms
if(!any(is.na(fields)))
args$fl <- paste(fields, collapse=",")
if(!is.na(start))
args$start <- start
if(!is.na(limit))
args$rows <- limit
args$wt <- "json"
args
argsgetnum <- list(q=terms, rows=0, wt="json", api_key=key)
getnum <- getForm(url,
.params = argsgetnum,
curl = curl)
getnumrecords <- fromJSON(I(getnum))$response$numFound
if(getnumrecords > limit){getnumrecords <- limit} else{getnumrecords <- getnumrecords}
getnumrecords
min(getnumrecords, limit)
if(!is.na(limit))
args$rows <- limit
args
tt <- getForm(url,
.params = args,
#       ...,
curl = curl)
library(httr)
url
GET(url, query = args)
GET("http://api.plos.org/search?q=publication_date:[2010-01-01T00:00:00Z%20TO%202010-02-31T23:59:59Z]&fl=publication_date,id&rows=5")
args
args <- args[!names(args)=="fq"]
args
GET(url, query = args)
searchplos(terms="*", fields='id', toquery="publication_date:[2010-01-01T00:00:00Z%20TO%202010-02-31T23:59:59Z]", start=0, limit=5)
searchplos(terms="*:*", fields='id', toquery="publication_date:[2012-09-03T00:00:00Z TO 2012-12-31T23:59:59Z]", start=0,limit=5)
searchplos(terms='ecology', limit = 1)
searchplos(terms='ecology', limit = 2)
library(taxize)
species <- c("Poa annua", "Abies procera", "Helianthus annuus", "Coffea arabica")
famnames <- sapply(species, itis_name, get = "family", USE.NAMES = F)
famnames
tax_name
famnames <- sapply(species, tax_name, get = "family", USE.NAMES = F)
famnames
famnames <- sapply(species, tax_name, get = "family", db = "ncbi", USE.NAMES = F)
famnames
data.frame(species = species, family = famnames)
knit("/Users/ScottMac/github/SChamberlain/posterstalks/bestalk/R/ropensci_egs_taxizeattachnames.Rhtml")
knit("/Users/ScottMac/github/SChamberlain/posterstalks/bestalk/R/ropensci_egs_taxizeattachnames.Rhtml")
?itis_downstream
itis_downstream(tsns=846509, downto="Genus")
knit("/Users/ScottMac/github/SChamberlain/posterstalks/bestalk/R/ropensci_egs.Rhtml")
knit("/Users/ScottMac/github/SChamberlain/posterstalks/bestalk/R/ropensci_egs.Rhtml")
